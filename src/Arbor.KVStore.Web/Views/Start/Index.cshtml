@using Arbor.KVStore
@using Arbor.KVStore.Web
@model Arbor.KVStore.Web.StartViewModel
@inject App App

<h1>Key Value Store</h1>

@if (!string.IsNullOrWhiteSpace(Model.TempMessage?.Message))
{
    <span>@Model.TempMessage.Message</span>
}

<h2>Clients</h2>

<div>

    <form method="post" action="/client">

        <select name="id">
            @foreach (ClientId item in Model.Clients)
            {
                <option value="@item.Id" @(item.Equals(Model.ClientId) ? "selected=\"selected\"" : "")>@item.Id</option>
            }
        </select>

        <input type="submit" value="Set client" />
    </form>
</div>

@if (Model.ClientId != null)
{
    <h2>
        @Model.ClientId
    </h2>

    <div>

        <h3>Values</h3>

        <a href="@Url.RouteUrl(RouteConstants.ClientValuesRouteName, new { clientId = Model.ClientId })">Values</a>
    </div>

    <div>

        <h3>Import</h3>

        <form method="post" action="@Url.RouteUrl(RouteConstants.ImportRouteName)" enctype="multipart/form-data">
            Import file <input type="file" name="importFile" />

            <label for="import-comment">Comment</label> <input id="import-comment" type="text" name="comment" />

            <input type="submit" value="Import" />
        </form>
    </div>
    <div>

        <h3>Export</h3>

        <form method="get" action="@Url.RouteUrl(RouteConstants.ExportRouteName)">
            
            <input type="submit" value="Export" />
            
        </form>
    </div>
    <div>
        <h3>New key-value pair</h3>
        <form method="post">

            <input type="hidden" name="clientId" value="@Model.ClientId.Id" />
            <input type="text" name="key" />
            <input type="text" name="value" />

            <input type="submit" value="Store" />

        </form>
    </div>

    <h3>Store key-value pairs</h3>

    <script type="text/javascript">

        function copyValue(newClip) {

            navigator.clipboard.writeText(newClip).then(function () {

            }, function () {
            });
        }

    </script>

    foreach (StoredValue storedValue in (App.ReadAllValues(Model.ClientId)))
    {
        <div class="item-form">

            <form method="post">

                <input type="hidden" name="clientId" value="@storedValue.ClientId" />
                <input type="hidden" name="key" value="@storedValue.Key" />

                @Html.Raw(storedValue.HtmlInput())

                <input type="submit" value="Store" />

                <input type="hidden" id="key-@storedValue.Key" />

            </form>

            <form method="post" action="/delete">

                <input type="hidden" name="clientId" value="@storedValue.ClientId" />
                <input type="hidden" name="key" value="@storedValue.Key" />

                <input type="submit" value="Delete" />

            </form>

            <span style="display: inline-block">
                <button onclick="copyValue('@storedValue.Value')">Copy</button>
            </span>

        </div>
    }
}

